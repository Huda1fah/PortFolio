import React, { useEffect, useRef } from 'react';
import { Cpu, Atom, Shield, Brain, Code, Zap } from 'lucide-react';

export default function SkillsSection() {
  const sectionRef = useRef(null);

  const skills = [
    {
      category: "Quantum Computing",
      icon: Atom,
      items: ["Quantum Algorithms", "Quantum Error Correction", "Quantum Circuit Design", "NISQ Programming"],
      color: "from-blue-500 to-cyan-500"
    },
    {
      category: "Programming",
      icon: Code,
      items: ["Python", "C++", "Rust", "JavaScript", "CUDA", "Assembly"],
      color: "from-purple-500 to-pink-500"
    },
    {
      category: "Quantum Frameworks",
      icon: Cpu,
      items: ["Qiskit", "Cirq", "PennyLane", "Amazon Braket", "Forest", "Q#"],
      color: "from-green-500 to-teal-500"
    },
    {
      category: "Research Areas",
      icon: Brain,
      items: ["Quantum ML", "Cryptography", "Optimization", "Quantum Sensing"],
      color: "from-orange-500 to-red-500"
    },
    {
      category: "Hardware",
      icon: Zap,
      items: ["Superconducting Qubits", "Ion Traps", "Photonic Systems", "Quantum Dots"],
      color: "from-indigo-500 to-purple-500"
    },
    {
      category: "Security",
      icon: Shield,
      items: ["Post-Quantum Crypto", "QKD", "Quantum Protocols", "Secure Communications"],
      color: "from-pink-500 to-rose-500"
    }
  ];

  useEffect(() => {
     const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.classList.add('is-visible');
          }
        });
      },
      {
        threshold: 0.1,
        triggerOnce: true
      }
    );
    
    const elementsToAnimate = sectionRef.current.querySelectorAll('.scale-in, .fade-in-up, .stagger-group');
    elementsToAnimate.forEach(el => observer.observe(el));

    return () => {
        elementsToAnimate.forEach(el => {
            if(el) observer.unobserve(el);
        });
    }
  }, []);

  return (
    <section 
      ref={sectionRef}
      className="skills-section relative min-h-screen px-6 py-20 overflow-hidden"
    >
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute top-20 left-10 w-32 h-32 bg-gradient-to-r from-blue-400 to-purple-400 rounded-full opacity-10"></div>
        <div className="absolute top-40 right-20 w-24 h-24 bg-gradient-to-r from-purple-400 to-pink-400 rounded-full opacity-10"></div>
        <div className="absolute bottom-32 left-20 w-40 h-40 bg-gradient-to-r from-green-400 to-teal-400 rounded-full opacity-10"></div>
      </div>

      <div className="relative z-10 max-w-7xl mx-auto">
        <div className="text-center mb-16">
          <h2 className="skills-title scale-in text-5xl lg:text-6xl font-light tracking-tight text-gray-900 mb-6">
            Technical
            <span className="block text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-purple-600">
              Expertise
            </span>
          </h2>
          <p className="fade-in-up text-xl text-gray-600 max-w-2xl mx-auto" style={{transitionDelay: '0.2s'}}>
            Comprehensive skills across quantum computing, programming, and research
          </p>
        </div>

        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8 stagger-group">
          {skills.map((skill, index) => {
            const IconComponent = skill.icon;
            return (
              <div
                key={index}
                className="stagger-item"
              >
                <div 
                  className="skill-card group relative h-full bg-white rounded-2xl p-8 shadow-lg hover:shadow-2xl transition-all duration-300 border border-gray-100 overflow-hidden"
                >
                  <div className={`absolute inset-0 bg-gradient-to-r ${skill.color} opacity-0 group-hover:opacity-5 transition-opacity duration-300`}></div>
                  
                  <div className={`relative z-10 w-16 h-16 rounded-xl bg-gradient-to-r ${skill.color} flex items-center justify-center mb-6 group-hover:scale-110 transition-transform duration-300`}>
                    <IconComponent className="w-8 h-8 text-white" />
                  </div>

                  <div className="relative z-10">
                    <h3 className="text-xl font-semibold text-gray-900 mb-4 group-hover:text-transparent group-hover:bg-clip-text group-hover:bg-gradient-to-r group-hover:from-blue-600 group-hover:to-purple-600 transition-all duration-300">
                      {skill.category}
                    </h3>
                    
                    <ul className="space-y-2">
                      {skill.items.map((item, itemIndex) => (
                        <li 
                          key={itemIndex}
                          className="flex items-center gap-2 text-gray-600 group-hover:text-gray-700 transition-colors duration-300"
                        >
                          <div className={`w-2 h-2 rounded-full bg-gradient-to-r ${skill.color}`}></div>
                          <span className="text-sm">{item}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      </div>
    </section>
  );
}