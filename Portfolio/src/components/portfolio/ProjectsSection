import React, { useEffect, useRef } from 'react';
import ProjectCard from './ProjectCard';

export default function ProjectsSection() {
  const sectionRef = useRef(null);

  const projects = [
    {
      title: "Quantum Error Correction Framework",
      description: "Developed a novel error correction protocol that reduces quantum decoherence by 40% using surface code topology and machine learning optimization.",
      technologies: ["Qiskit", "Python", "TensorFlow", "IBM Quantum"],
      category: "Research",
      impact: "Published in Nature Quantum Information"
    },
    {
      title: "Scalable Quantum Architecture",
      description: "Designed a modular quantum computing architecture supporting 1000+ qubits with fault-tolerant operations and real-time error monitoring.",
      technologies: ["Cirq", "C++", "CUDA", "Google Quantum AI"],
      category: "Engineering",
      impact: "Patent pending, 3 citations"
    },
    {
      title: "Quantum Cryptography Suite",
      description: "Built a comprehensive quantum key distribution system with post-quantum cryptographic algorithms for secure communications.",
      technologies: ["OpenSSL", "Rust", "Quantum Networks", "Protocol Design"],
      category: "Security",
      impact: "Deployed in 5 financial institutions"
    },
    {
      title: "Quantum ML Optimization",
      description: "Created quantum-enhanced machine learning algorithms that achieve 60% speedup on classification tasks using variational quantum circuits.",
      technologies: ["PennyLane", "PyTorch", "Quantum Circuits", "NISQ Algorithms"],
      category: "Machine Learning",
      impact: "Winner of IBM Quantum Challenge"
    }
  ];

  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.classList.add('is-visible');
          }
        });
      },
      {
        threshold: 0.1,
        triggerOnce: true
      }
    );
    
    const elementsToAnimate = sectionRef.current.querySelectorAll('.scale-in, .fade-in-up, .stagger-group');
    elementsToAnimate.forEach(el => observer.observe(el));

    return () => {
        elementsToAnimate.forEach(el => {
            if(el) observer.unobserve(el);
        });
    }
  }, []);

  return (
    <section 
      ref={sectionRef}
      className="projects-section relative min-h-screen px-6 py-20"
    >
      <div className="max-w-7xl mx-auto">
        <div className="text-center mb-16">
          <h2 className="projects-title scale-in text-5xl lg:text-6xl font-light tracking-tight text-gray-900 mb-6">
            Featured
            <span className="block text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-purple-600">
              Projects
            </span>
          </h2>
          <p className="fade-in-up text-xl text-gray-600 max-w-2xl mx-auto" style={{transitionDelay: '0.2s'}}>
            Breakthrough research and engineering solutions in quantum computing
          </p>
        </div>

        <div className="grid lg:grid-cols-2 gap-8 stagger-group">
          {projects.map((project, index) => (
            <div className="stagger-item" key={index}>
              <ProjectCard 
                project={project} 
                index={index}
              />
            </div>
          ))}
        </div>
      </div>
    </section>
  );
}